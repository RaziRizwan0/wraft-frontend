name: Build and Push Docker Image
on:
  push:
    branches: [git-action]
env:
  REGISTRY: quay.io
  IMAGE_NAME: newrepo
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Need write to create tags
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for versioning
      
      - name: Extract organization name
        id: extract_org
        run: |
          ORG_NAME=$(echo "${{ secrets.QUAY_USERNAME }}" | cut -d'+' -f1)
          echo "ORG_NAME=${ORG_NAME}" >> $GITHUB_ENV
      
      - name: Custom Semantic Versioning
        id: version
        run: |
          # Get the latest tag, default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers (remove 'v' prefix)
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Commit message: $COMMIT_MSG"
          
          # Determine version bump based on commit message
          if [[ $COMMIT_MSG =~ ^feat!.*|.*BREAKING\ CHANGE.* ]]; then
            # Major version bump
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          elif [[ $COMMIT_MSG =~ ^feat.*: ]]; then
            # Minor version bump
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          elif [[ $COMMIT_MSG =~ ^(fix|docs|style|refactor|test|chore).*: ]]; then
            # Patch version bump
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          else
            # Default patch bump for non-conventional commits
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch (default)"
          fi
          
          # Create new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION (bump: $BUMP_TYPE)"
          
          # Create git tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          # Output for next steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION_NUMBER=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION_NUMBER }}
      
      - name: Summary
        run: |
          echo "## ðŸš€ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Tags:** latest, ${{ env.VERSION_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
